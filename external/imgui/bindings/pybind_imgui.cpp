// Part of ImGui Bundle - MIT License - Copyright (c) 2022-2024 Pascal Thomet - https://github.com/pthom/imgui_bundle
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/numpy.h>

#include "imgui.h"
#include "imgui_internal.h"
#include "imgui_pywrappers.h"
#include "misc/cpp/imgui_stdlib.h"

using uint = unsigned int;
using uchar = unsigned char;

namespace py = pybind11;


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// <litgen_glue_code>  // Autogenerated code below! Do not edit!

// </litgen_glue_code> // Autogenerated code end
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE END !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


void py_init_module_imgui_main(py::module_& m) {

    ///////////////////////////////////////////////////////////////////////////
    // Manual patches for elements whose signature is too esoteric
    // and cannot be automatically bound
    ///////////////////////////////////////////////////////////////////////////

    // FLT_MIN & FLT_MAX
    m.attr("FLT_MIN") = (float) FLT_MIN;
    m.attr("FLT_MAX") = (float) FLT_MAX;


    // From imgui_internal.h
    m.def("DockBuilderRemoveNode", ImGui::DockBuilderRemoveNode);
    m.def("DockBuilderAddNode", ImGui::DockBuilderAddNode);
    m.def("DockBuilderSetNodeSize", ImGui::DockBuilderSetNodeSize);

    // We need to return the ID of both left and right sides, since
    // the same ID cannot be split twice.
    m.def("DockBuilderSplitNode",
        [](ImGuiID node_id, ImGuiDir split_dir, float size_ratio_for_node_at_dir, std::optional<int> unused1=0, std::optional<int> unused2=0) {
            ImGuiID out_id_at_dir;
            ImGuiID out_id_at_opposite_dir;
            ImGui::DockBuilderSplitNode(node_id, split_dir, size_ratio_for_node_at_dir, &out_id_at_dir, &out_id_at_opposite_dir);
            return py::make_tuple(out_id_at_dir, out_id_at_opposite_dir);
    });
    m.def("DockBuilderDockWindow", ImGui::DockBuilderDockWindow);
    m.def("DockBuilderFinish", ImGui::DockBuilderFinish);


    // From imgui_demo.cpp
    #if !defined(IMGUI_DISABLE_DEMO_WINDOWS)

    m.def("ShowDemoWindow",
          [](std::optional<bool> p_open = std::nullopt) -> std::optional<bool> {
              auto ShowDemoWindow_adapt_modifiable_immutable_to_return = [](
                  std::optional<bool> p_open = std::nullopt) -> std::optional<bool> {
                  bool* p_open_adapt_modifiable = nullptr;
                  if (p_open.has_value())
                      p_open_adapt_modifiable = &(*p_open);

                  ImGui::ShowDemoWindow(p_open_adapt_modifiable);
                  return p_open;
              };

              return ShowDemoWindow_adapt_modifiable_immutable_to_return(p_open);
          },
          py::arg("p_open") = py::none(),
          "create Demo window. demonstrate most ImGui features. call this to learn about the library! try to make it always available in your application!");

    m.def("ShowDebugLogWindow",
          [](std::optional<bool> p_open = std::nullopt) -> std::optional<bool> {
              auto ShowDebugLogWindow_adapt_modifiable_immutable_to_return = [](
                  std::optional<bool> p_open = std::nullopt) -> std::optional<bool> {
                  bool* p_open_adapt_modifiable = nullptr;
                  if (p_open.has_value())
                      p_open_adapt_modifiable = &(*p_open);

                  ImGui::ShowDebugLogWindow(p_open_adapt_modifiable);
                  return p_open;
              };

              return ShowDebugLogWindow_adapt_modifiable_immutable_to_return(p_open);
          },
          py::arg("p_open") = py::none(),
          "create Debug Log window. display a simplified log of important dear imgui events.");

    m.def("ShowIDStackToolWindow",
          [](std::optional<bool> p_open = std::nullopt) -> std::optional<bool> {
              auto ShowIDStackToolWindow_adapt_modifiable_immutable_to_return = [](
                  std::optional<bool> p_open = std::nullopt) -> std::optional<bool> {
                  bool* p_open_adapt_modifiable = nullptr;
                  if (p_open.has_value())
                      p_open_adapt_modifiable = &(*p_open);

                  ImGui::ShowIDStackToolWindow(p_open_adapt_modifiable);
                  return p_open;
              };

              return ShowIDStackToolWindow_adapt_modifiable_immutable_to_return(p_open);
          },
          py::arg("p_open") = py::none(),
          "create Stack Tool window. hover items with mouse to query information about the source of their unique ID.");

    m.def("ShowAboutWindow",
          [](std::optional<bool> p_open = std::nullopt) -> std::optional<bool> {
              auto ShowAboutWindow_adapt_modifiable_immutable_to_return = [](
                  std::optional<bool> p_open = std::nullopt) -> std::optional<bool> {
                  bool* p_open_adapt_modifiable = nullptr;
                  if (p_open.has_value())
                      p_open_adapt_modifiable = &(*p_open);

                  ImGui::ShowAboutWindow(p_open_adapt_modifiable);
                  return p_open;
              };

              return ShowAboutWindow_adapt_modifiable_immutable_to_return(p_open);
          },
          py::arg("p_open") = py::none(),
          "create About window. display Dear ImGui version, credits and build/system information.");

    m.def("ShowStyleEditor",
          ImGui::ShowStyleEditor,
          py::arg("ref") = py::none(),
          "add style editor block (not a window). you can pass in a reference ImGuiStyle structure to compare to, revert to and save to (else it uses the default style)");

    m.def("ShowStyleSelector",
          ImGui::ShowStyleSelector,
          py::arg("label"),
          "add style selector block (not a window), essentially a combo listing the default styles.");

    m.def("ShowFontSelector",
          ImGui::ShowFontSelector,
          py::arg("label"),
          "add font selector block (not a window), essentially a combo listing the loaded fonts.");

    m.def("ShowUserGuide",
          ImGui::ShowUserGuide,
          "add basic help/info block (not a window): how to manipulate ImGui as an end-user (mouse/keyboard controls).");

    #endif


    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    // <litgen_pydef>  // Autogenerated code below! Do not edit!

    // </litgen_pydef> // Autogenerated code end
    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE END !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


    // For additional manual bindings
    #include "extra.inl"
}
